# Python 2 Versus Python 3
All of the code samples in this book have been written for Python 3.6. Except for very minor
changes, they should work in Python 2.7 as well. The author believes that Python 3 has
crossed the tipping point for being the preferred choice for new Django projects.
پایتون 2 در مقابل پایتون 3
تمام نمونه کدهای این کتاب برای پایتون 3.6 نوشته شده است. 
به جز تغییرات بسیار جزیی، آنها باید در پایتون 2.7 نیز کار کنند. 
نویسنده بر این باور است که پایتون 3 از نقطه ی اوج برای انتخاب ترجیحی برای پروژه های جدید جنگو عبور کرده است.


Python 2.7 development was supposed to end in 2015 but was extended for 5 more years,
through to 2020. There will not be a Python 2.8. As mentioned in **Chapter 2**, Application
Design, most major Linux distributions and cloud vendors have completely switched to
using Python 3 as a default or support it.
قرار بود توسعه ی پایتون 2.7 در سال 2015 به پایان برسد اما برای 5 سال دیگر تا سال 2020 تمدید شد. 
پایتون 2.8 وجود نخواهد داشت. همان طور که در **فصل 2**، طراحی برنامه ذکر شد، 
بیشتر توزیع های اصلی لینوکس و فروشندگان ابری به طور کامل به استفاده از Python 3 به عنوان پیش فرض یا پشتیبانی از آن روی آورده اند.


This appendix has been written for developers who are not familiar with Python 3. A brief
historical background and syntax changes in Python 3 are discussed. Rather than offering
exhaustive coverage of Python 3 features, only the relevant ones for Django developers are
covered.
این پیوست برای توسعه دهندگانی نوشته شده  که با پایتون 3 آشنایی ندارند. 
پیشینه ی تاریخی مختصر و تغییرات ترکیبی در پایتون 3 مورد بحث قرار گرفته است. 
به جای ارائه ی پوشش جامع از ویژگی های Python 3، تنها موارد مربوط به توسعه دهندگان جنگو پوشش داده شده است.

### Python 3
### پایتون 3

Python 3 was born out of necessity. One of Python 2's major annoyances was its
inconsistent handling of non-English characters (commonly manifested as the infamous
UnicodeDecodeError). Guido initiated the Python 3 project to clean up a number of such
language issues while breaking backward compatibility.
پایتون 3 از سر ناچاری متولد شد. 
یکی از مزاحمت های اصلی پایتون 2، مدیریت ناسازگار آن با کاراکترهای غیرانگلیسی 
بود (که به طور معمول به عنوان خطای بدنام UnicodeDecode نشان داده می شود). 
Guido پروژه Python 3 را برای پاکسازی تعدادی از چنین مشکلات زبانی و در عین حال شکستن سازگاری با نسخه های پیشین، آغاز کرد.


The first alpha release of Python 3.0 was made in August 2007. Since then, Python 2 and
Python 3 have been in parallel development by the core development team for a number of
years. Eventually, Python 3 is expected to be the future of the language.
اولین نسخه ی آلفا پایتون 3.0 در آگوست 2007 ساخته شد. 
از آن زمان، پایتون 2 و پایتون 3 چندین سال به طور موازی توسط تیم توسعه ی اصلی توسعه داده شده اند. 
در نهایت، انتظار می رود پایتون 3 آینده ی این زبان باشد.


### Python 3 for Djangonauts
This section covers the most important changes in Python 3 from a Django developer's
perspective. To understand the full list of changes, refer to the recommended reading
section at the end.
### پایتون 3 برای جنگویی ها
این بخش مهم ترین تغییرات پایتون 3 را از دیدگاه توسعه دهندگان جنگو پوشش می دهد. 
برای درک لیست کامل تغییرات، به بخش خواندن توصیه شده در پایان مراجعه کنید.


The examples are given in both Python 2 and Python 3. Depending on your installation, all
Python 3 commands might need to be changed from Python to Python 3.
مثال‌ها در پایتون 2 و پایتون 3 ارائه شده‌اند. 
بسته به نوع نصب شما، ممکن است لازم باشد همه دستورات پایتون 3 از پایتون به پایتون 3 تغییر کنند.


**Change all `__unicode__` methods into `__str__`**
**همه متدهای «__unicode__» را به «__str__» تغییر دهید**

In Python 3, the `__str__()` method is called for string representation of your models
rather than the awkward sounding `__unicode__()` method. This is one of the most
evident ways of identifying Python 3 ported code:
در پایتون 3، متد «()__str__» برای نمایش رشته‌ای مدل‌های شما 
به جای متد «()__unicode__» با صدای نامناسب فراخوانی می‌شود. 
این یکی از واضح ترین راه های شناسایی کدهای پورت شده پایتون 3 است:


**python 2**

```python
class Person(models.Model):
    name = models.TextField()

    def __unicode__(self):
        return self.name
```


**python 3**

```python
class Person(models.Model):
    name = models.TextField()

    def __str__(self):
        return self.name
```

This reflects the difference in the way Python 3 treats strings. In Python 2, the human
readable representation of a class can be returned by `__str__()` (bytes) or
`__unicode__()` (text). However, in Python 3, the readable representation is simply
returned by `__str__()` (text).
این نشان دهنده ی تفاوت در نحوه ی برخورد پایتون 3 با رشته ها است. 
در Python 2، نمایش قابل خواندن توسط انسان یک کلاس را 
می توان با «()__str__» (بایت) یا «()__unicode__» (متن) برگرداند. 
با این حال، در پایتون 3، نمایش قابل خواندن به سادگی توسط «()__str__» (متن) برگردانده می شود.


### All classes inherit from object
### همه کلاس ها از شی ارث می برند

Python 2 has two kinds of classes: old-style (classic) and new-style. New-style classes are
classes that directly or indirectly inherit from object. Only new-style classes can use
Python's advanced features, such as slots, descriptors, and properties. Many of these are
used by Django. However, classes are still old-style by default for compatibility reasons.
پایتون 2 دارای دو نوع کلاس است: سبک قدیمی (کلاسیک) و سبک جدید. 
کلاس های سبک جدید کلاس هایی هستند که به طور مستقیم یا غیرمستقیم از شی به ارث می برند. 
فقط کلاس‌های سبک جدید می‌توانند از ویژگی‌های پیشرفته پایتون مانند اسلات‌ها، توصیف‌گرها و ویژگی‌ها استفاده کنند. 
بسیاری از این ها توسط جنگو استفاده می شود. 
با این حال، کلاس ها به دلایل سازگاری هنوز به طور پیش فرض قدیمی هستند.


In Python 3, old-style classes don't exist anymore. As seen in the following table, even if
you don't explicitly mention any parent classes, the object class will be present as a base. So,
all classes are new-style:
در پایتون 3، کلاس‌های قدیمی دیگر وجود ندارند. 
همانطور که در جدول زیر مشاهده می شود، 
حتی اگر به صراحت هیچ کلاس والد را ذکر نکنید، 
کلاس شی به عنوان پایه وجود خواهد داشت. 
بنابراین، همه کلاس ها به سبک جدید هستند:

**python 2**

```python
>>> class CoolMixin:
... pass
>>> CoolMixin.__bases__
()
```

**python 3**

```python
>>> class CoolMixin:
... pass
>>> CoolMixin.bases
(<class 'object'>,)
```

**Calling super() is easier**
**فراخوانی ()super آسانتر است**

The simpler call to super(), without any arguments, will save you some typing in Python 3:
فراخوانی ساده‌تر  ()super، بدون هیچ آرگومان، 
مقداری از تایپ کردن در پایتون 3 را برای شما ذخیره می‌کند:


**python 2**

```python
class CoolMixin(object):
    def do_it(self):
        return super(CoolMixin, self).do_it()
```


**python 3**

```python
class CoolMixin:
    def do_it(self):
        return super().do_it()
```


Specifying the class name and instance is optional, thereby making your code **DRY** and less
prone to errors while refactoring.
تعیین نام و نمونه کلاس اختیاری است، 
بنابراین کد شما **DRY** و کمتر مستعد خطا در هنگام بازآفرینی است.


### Relative imports must be explicit
### ورودی های مرتبط بایستی صریح باشند

Imagine the following directory structure for a package named app1:
ساختار دایرکتوری زیر را برای بسته ای به نام app1 تصور کنید:


```
/app1
 /__init__.py
 /models.py
 /tests.py
```

Now, in Python 3, let's run the following in the parent directory of app1:
اکنون، در پایتون 3، بیایید موارد زیر را در دایرکتوری والد app1 اجرا کنیم:


```
$ echo "import models" > app1/tests.py

$ python -m app1.tests
Traceback (most recent call last):
 ... omitted ...
ImportError: No module named 'models'

$ echo "from . import models" > app1/tests.py

$ python -m app1.tests
# Successfully imported
```

Within a package, you should use explicit relative imports when referring to a sibling
module. You can omit `__init__.py` in Python 3, though it is commonly used to identify
a package.
در یک بسته، هنگام مراجعه به یک ماژول خواهر و برادر، 
بایستی از ورودی های مرتبط صریح استفاده کنید. 
می‌توانید «__init__.py» را در پایتون 3 حذف کنید، 
اگرچه معمولاً برای شناسایی یک بسته استفاده می‌شود.

In Python 2, you can use import models to successfully import the `models.py` module.
However, it is ambiguous and could accidentally import any other `models.py` in your
Python path; hence, this is forbidden in Python 3 and discouraged in Python 2 as well.
در پایتون 2، می‌توانید از ورود مدل‌ها برای وارد کردن موفقیت آمیز ماژول «models.py» استفاده کنید. 
با این حال، مبهم است و می تواند به طور تصادفی هر «models.py» دیگری را در مسیر پایتون شما وارد کند. 
از این رو، این در پایتون 3 ممنوع است و در پایتون 2 نیز ممنوع است.


### HttpRequest and HttpResponse have str and bytes types
### اHttpRequest و HttpResponse دارای انواع str و bytes هستند

In Python 3, according to PEP 3333 (amendments to the WSGI standard), we are careful not
to mix data coming from or leaving via HTTP, which will be in bytes, as opposed to text
within the framework, which will be native (Unicode) strings.
در پایتون 3، طبق PEP 3333 (اصلاحات استاندارد WSGI)، 
ما مراقبیم که داده‌هایی را که از HTTP می‌آیند یا از آن طریق خارج می‌شوند، 
که بر حسب بایت هستند، 
در مقابل متن‌های درون چارچوب، که رشته های بومی (یونیکد) هستند، مخلوط نکنیم.


Essentially, for HttpRequest and HttpResponse objects, keep the following in mind:
اساساً برای اشیاء HttpRequest و HttpResponse موارد زیر را در نظر داشته باشید:

- Headers will always be `str` objects
- Input and output streams will always be byte objects
- عنوان ها همیشه اشیاء «str» خواهند بود
- جریان های ورودی و خروجی همیشه اشیاء بایتی خواهند بود


Unlike Python 2, strings and bytes are not implicitly converted while performing
comparisons or concatenations with each other. Strings means Unicode strings only.
برخلاف پایتون 2، رشته ها و بایت ها به طور ضمنی 
در حین انجام مقایسه یا الحاق با یکدیگر تبدیل نمی شوند. Strings به معنی فقط رشته های یونیکد است.


### f-strings or formatted string literals
### رشته های f یا رشته های قالب بندی شده

In Python 3, you might see string literals prefixed by an f. These strings may contain
expressions inside curly brackets, similar to the format strings accepted by `str.format()`.
They will be evaluated at runtime using the `format()` protocol.
در پایتون 3، ممکن است لفظ های رشته ای را با پیشوند f ببینید. 
این رشته ها ممکن است حاوی عباراتی در داخل براکت های فرفری باشند، 
مشابه رشته های قالب پذیرفته شده توسط `()str.format`. 
آنها در زمان اجرا با استفاده از پروتکل `()format` ارزیابی خواهند شد.


Here are some examples:
در اینجا چند نمونه آورده شده است:

```
>>> class Person:
...    def __init__(self, name):
...       self.name = name
...    def __str__(self):
...       return f"name is {self.name}"
...

>>> p = Person("Hexa")

>>> str(p)
'name is Hexa'
```

Though this syntax might seem alien at first, you will find it to be more convenient to use
than the alternatives for string formatting.
اگرچه ممکن است این ترکیب در ابتدا بیگانه به نظر برسد، 
اما استفاده از آن راحت‌تر از جایگزین‌های قالب‌بندی رشته‌ای است.


### Exception syntax changes and improvements
### تغییرات و بهبود ترکیب استثنا

Exception handling syntax and functionality has been significantly improved in Python 3.
ترکیب و عملکرد مدیریت استثنا در پایتون 3 به طور قابل توجهی بهبود یافته است.


In Python 3, you cannot use the comma-separated syntax for the `except` clause. Use the `as` keyword instead:
در پایتون 3، شما نمی توانید از نحو جدا شده با کاما برای عبارت `except` استفاده کنید. 
به جای آن از کلمه کلیدی `as` استفاده کنید:

**python 2**

```python
try:
  pass
except e, BaseException:
  pass
```

**python 2 and 3**

```python
try:
    pass
except e as BaseException:
    pass
```


The new syntax is recommended for Python 2 as well.
ترکیب جدید برای پایتون 2 نیز توصیه می شود.

In Python 3, all exceptions must be derived (directly or indirectly) from `BaseException`. In
practice, you will create your custom exceptions by deriving from the `Exception` class.
در پایتون 3، همه ی استثناها باید (مستقیم یا غیرمستقیم) از `BaseException` مشتق شوند. 
در عمل، شما استثناهای سفارشی خود را با استخراج از کلاس `Exception` ایجاد خواهید کرد.

As a major improvement in error reporting, if an exception occurs while handling an
exception, the entire chain of exceptions is reported:
به عنوان یک پیشرفت عمده در گزارش خطا، 
اگر یک استثنا در هنگام مدیریت یک استثنا رخ دهد، همه ی زنجیره ی استثناها گزارش می شود:


**python 2**

```python
>>> try:
...   print(undefined)
... except Exception:
...   print(oops)
...

Traceback (most recent call
last):
 File "<stdin>", line 4, in
<module>
NameError: name 'oops' is not defined
```

**python 3**

```python
>>> try:
...   print(undefined)
... except Exception:
...   print(oops)
...

Traceback (most recent call last):
File "<stdin>", line 2, in <module>
NameError: name 'undefined' is not defined
During handling of the above exception,
another exception occurred:
Traceback (most recent call last):
File "<stdin>", line 4, in <module>
NameError: name 'oops' is not defined
```

Once you get used to this feature, you will definitely miss it in Python 2.
وقتی به این ویژگی عادت کردید، قطعا در پایتون 2 آن را از دست خواهید داد.


### Standard library reorganized
### کتابخانه ی استاندارد، دوباره سازماندهی شد

The core developers have cleaned up and better organized the Python standard library. For
instance, `SimpleHTTPServer` now lives in the `http.server` module:
توسعه دهندگان اصلی کتابخانه ی استاندارد پایتون را پاکسازی و بهتر سازماندهی کرده اند. 
به طور مثال، `SimpleHTTPServer` اکنون در ماژول `http.server` زندگی می کند:

**python 2**

```python
$ python -m SimpleHTTPServer
Serving HTTP on 0.0.0.0 port 8000 ...
```

**python 3**

```python
$python -m http.server
Serving HTTP on 0.0.0.0 port 8000 ...
```

### New goodies
### چیزهای خوب جدید

Python 3 is not just about language fixes. It is also where bleeding-edge Python
development happens. This means improvements to the language in terms of syntax,
performance, and built-in functionality.
پایتون 3 فقط در مورد اصلاح زبان نیست. 
همچنین جایی است که توسعه ی پایتون به صورت بی‌نظیر رخ می‌دهد. 
این به معنای بهبود زبان از نظر ترکیب، عملکرد و عملکرد داخلی است.


Some of the notable new modules added to Python 3 are as listed:
- asyncio: Asynchronous I/O, event loop, coroutines, and tasks
- secrets: Cryptographically strong random numbers
- unittest.mock: Mock object library for testing
- pathlib: Object-oriented filesystem paths
- statistics: Mathematical statistics functions
برخی از ماژول های جدید قابل توجه اضافه شده به پایتون 3 به شرح زیر است:
- اasyncio: ورودی/خروجی ناهمزمان، حلقه رویداد، برنامه‌ها و وظایف
- اسرار: اعداد تصادفی رمزنگاری قوی
- اunittest.mock: کتابخانه شی ساختگی برای آزمایش
- اpathlib: مسیرهای سیستم فایل شی گرا
- آمار: توابع آمار ریاضی


Even though some of these modules might have backports to Python 2, it is more appealing
to migrate to Python 3 and leverage them as built-in modules.
حتی اگر برخی از این ماژول ها به وسیله ی پایتون 2 پشتیبانی شوند، 
مهاجرت به پایتون 3 و استفاده از آنها به عنوان ماژول های داخلی جذاب تر است.


#### Pyvenv and pip are built in
#### اPyvenv و pip داخلی سازی شده اند

Most serious Python developers prefer using virtual environments. `virtualenv` is quite
popular for isolating project setups from the system-wide Python installation. Thankfully,
Python 3.3 is integrated with a similar functionality using the `venv` module.
بیشتر توسعه دهندگان جدی پایتون استفاده از محیط های مجازی را 
ترجیح می دهند. `virtualenv` برای جداسازی تنظیمات پروژه از نصب پایتون 
در سراسر سیستم بسیار محبوب است. 
خوشبختانه، پایتون 3.3 با یک عملکرد مشابه با استفاده از ماژول `venv` یکپارچه شده است.


From Python 3.4, a fresh virtual environment will be pre-installed with `pip`, a popular
installer:
از پایتون 3.4، یک محیط مجازی جدید با `pip`، 
یک نصب کننده ی محبوب، از پیش نصب می شود:


```shell
$ python -m venv djenv
[djenv] $ source djenv/bin/activate
[djenv] $ pip install django
```

### Other changes
### سایر تغییرات

We cannot possibly fit all the Python 3 changes and improvements into this appendix.
However, the other commonly cited changes are as follows:
ما نمی‌توانیم تمام تغییرات و بهبودهای Python 3 را در این ضمیمه قرار دهیم. 
با این حال، سایر تغییرات رایج به شرح زیر است:

1. `print()` is now a function: Previously it was a statement, that is, arguments were not in parentheses
2. Integers don't overflow: `sys.maxint` is outdated; integers will have unlimited precision
3. Inequality `operator <>` is removed: Use != instead
4. True Integer Division: In Python 2, 3/2 would evaluate to 1. It will be correctly evaluated to 1.5 in Python 3
5. Use range instead of xrange: `range()` will now return iterators, as `xrange()` used to work before
6. Dictionary keys are views: dict and dict-like classes (such as `QueryDict`) will return iterators instead of lists for `keys()`, `items()`, and `values()` method calls
1. اکنون `()print` یک تابع است: در گذشته یک دستور بود، یعنی آرگومان ها در پرانتز نبودند.
2. اعداد صحیح سرریز نمی شوند: `sys.maxint` قدیمی است. اعداد صحیح دقت نامحدودی خواهند داشت
3. نابرابری `operator <>` حذف شده است: به جای آن از != استفاده کنید
4. تقسیم عدد صحیح واقعی: در پایتون 2، 3/2 به 1 محاسبه می شود. در پایتون 3 به درستی به 1.5 محاسبه می شود.
5. از محدوده به جای xrange استفاده کنید: `()range` اکنون تکرارگرها را برمی گرداند، همانطور که `xrange()` در گذشته کار می کرد.
6. کلیدهای دیکشنری نماها هستند: کلاس‌های dict و مانند dict (مانند `QueryDict`) به جای فهرست‌هایی برای فراخوانی‌های متد `()keys` و `()items` و `()values` تکرارگرها را برمی‌گردانند.



### Further information
### اطلاعات بیشتر

- Read What's New In Python 3.0 by Guido
- مطالب جدید در پایتون 3.0 توسط Guido را بخوانید
https://docs.python.org/3/whatsnew/3.0.html
- To find out what's new in each release of Python, read What's New in
Python at https://docs.python.org/3/whatsnew/
- برای اطلاع از موارد جدید در هر نسخه از پایتون، موارد جدید در پایتون را در https://docs.python.org/3/whatsnew/ بخوانید.
- For richly-detailed answers about Python 3, read Python 3 Q & A by Nick Coghlan
at http://python-notes.curiousefficiency.org/en/latest/python3/questions_and_answers.html
- برای پاسخ‌های کامل و مفصل درباره ی پایتون 3، پرسش و پاسخ پایتون 3 توسط نیک کوگلان را در آدرس مورد اشاره بخوانید.
